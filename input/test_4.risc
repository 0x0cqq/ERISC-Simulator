mov a1,0x1
mov a2,0x2
mov a3,0x10
mov a4,0x4
mov a5,0x100000
mov a6,1000000
mov a7,0x01010101
mov s11,0x01000000
mov s10,0x00010000
mov s9,0x00000100
mov s8,0x00000001
mov s7,0x00010101
mov s6,0x01000101
mov s5,0x01010001
mov s4,0x01010100

store s4,a5
add a5,a5,a4
store s5,a5
add a5,a5,a4
store s6,a5
add a5,a5,a4
store s7,a5
add a5,a5,a4
store s8,a5
add a5,a5,a4
store s9,a5
add a5,a5,a4
store s10,a5
add a5,a5,a4
store s11,a5
mov a5,0x100000

mov s1,x0
loopp: // 循环变量放在s1
store a7,s1
add s1,s1,a4
blt s1,a6,loopp 
draw
mov s1,a2

loopa:// 循环变量放在 s1
call getval
beq t2,x0,innerend
add s2,s1,s1
loopb:// 循环变量放在 s2
blt a6,s2,innerend
call changeval
add s2,s2,s1
jal loopb
innerend:
add s1,s1,a1
mul s3,s1,s1
bge a6,s3,loopa
draw
end

// t3, t4, t5 是三个变量
// t3 放 load/store 的目标位置 (mod 4)
// t4 放具体字节个数（mod 4）
getval: // 参数在 s1 ，获取第i位置的结果，结果放在 t2
rem t5,s1,a4 // 获取在字节中的位置
sub t4,s1,t5 //刨去余数，获取字节位置
load t6,t4 // 取出来整字节
mul t5,t5,a4 // 把余数乘以 4
add t5,t5,a3 // 向后偏移 16 
add t5,t5,a5 // 向后偏移 a5，找到要与的东西
load t5,t5 // 把字节取出来
and t2,t6,t5 // 加到上面去
ret

changeval: // 参数在 s2 ，把第i位置的结果设置成1
rem t5,s2,a4 //获取在字节中的位置
sub t4,s2,t5 //除 4，获取字节位置
load t6,t4 // 取出来整字节
mul t5,t5,a4 // 余数乘以4
add t5,t5,a5 // 往后偏移 a5
load t5,t5 // 取出来
and t6,t6,t5 // 与上去
store t6,t4
ret
